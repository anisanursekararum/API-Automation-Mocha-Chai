{
  "stats": {
    "suites": 7,
    "tests": 38,
    "passes": 38,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-17T02:56:31.235Z",
    "end": "2023-10-17T02:57:03.822Z",
    "duration": 32587,
    "testsRegistered": 38,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "3b37319a-eeb0-4c7f-9260-a2db58f0aa01",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
          "title": "TS Authentication",
          "fullFile": "F:\\mqa_dot\\tests\\scenarios\\auth.spec.js",
          "file": "\\tests\\scenarios\\auth.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC success login",
              "fullTitle": "TS Authentication TC success login",
              "timedOut": false,
              "duration": 749,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().login(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "67751ecf-5be2-484f-9130-be30e3ac585c",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC failed login password empty",
              "fullTitle": "TS Authentication TC failed login password empty",
              "timedOut": false,
              "duration": 705,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().login(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "2d85c997-0c25-4e4e-83b5-4187237f3d20",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC failed login email empty",
              "fullTitle": "TS Authentication TC failed login email empty",
              "timedOut": false,
              "duration": 503,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().login(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "c279f1a3-8ff8-4db8-b76e-2ae5ca55c0ca",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC failed login email invalid",
              "fullTitle": "TS Authentication TC failed login email invalid",
              "timedOut": false,
              "duration": 405,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().login(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "226ea0b1-a193-4ab2-81bb-60fbcd1276b8",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC failed login password invalid",
              "fullTitle": "TS Authentication TC failed login password invalid",
              "timedOut": false,
              "duration": 715,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().login(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "7256cb14-0be7-4332-9044-a67977ba8bf0",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC failed login invalid credential",
              "fullTitle": "TS Authentication TC failed login invalid credential",
              "timedOut": false,
              "duration": 410,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().login(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "dcf26a84-3ae0-4de6-8ad7-22dd8fe257e2",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC success register",
              "fullTitle": "TS Authentication TC success register",
              "timedOut": false,
              "duration": 815,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().registration(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "a41a73db-f8d0-484e-8f4a-495a974fd33b",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC failed register name empty",
              "fullTitle": "TS Authentication TC failed register name empty",
              "timedOut": false,
              "duration": 712,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().registration(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "e1d8d5a8-c20e-4740-b87e-392f34be6f83",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC failed register email empty",
              "fullTitle": "TS Authentication TC failed register email empty",
              "timedOut": false,
              "duration": 612,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().registration(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "130b7eeb-c3ee-4340-99be-1a69dbb5ec38",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC failed register password empty",
              "fullTitle": "TS Authentication TC failed register password empty",
              "timedOut": false,
              "duration": 817,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().registration(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "4df7117b-0356-41d6-b87a-f377da1f8469",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC failed register unknown parameter",
              "fullTitle": "TS Authentication TC failed register unknown parameter",
              "timedOut": false,
              "duration": 515,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().registration(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "64767bd5-2064-4f39-8136-5100d51ee843",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC failed register name parameter is not sent",
              "fullTitle": "TS Authentication TC failed register name parameter is not sent",
              "timedOut": false,
              "duration": 509,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().registration(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "011a31c5-bf33-4941-8d22-5410c9a1f051",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC failed register email parameter is not sent",
              "fullTitle": "TS Authentication TC failed register email parameter is not sent",
              "timedOut": false,
              "duration": 506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().registration(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "48836e60-502b-4dd8-b38a-b4a21623c463",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC failed register password parameter is not sent",
              "fullTitle": "TS Authentication TC failed register password parameter is not sent",
              "timedOut": false,
              "duration": 412,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().registration(item.payload);\nexpect(response.status).to.be.equal(item.case.status);\nexpect(response.body.message).to.be.equal(item.case.message);",
              "err": {},
              "uuid": "80fd80ac-d884-44d3-b0f4-eeb3a75d4332",
              "parentUUID": "27e40fa0-590f-4ed3-8f31-74b0d291c874",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "67751ecf-5be2-484f-9130-be30e3ac585c",
            "2d85c997-0c25-4e4e-83b5-4187237f3d20",
            "c279f1a3-8ff8-4db8-b76e-2ae5ca55c0ca",
            "226ea0b1-a193-4ab2-81bb-60fbcd1276b8",
            "7256cb14-0be7-4332-9044-a67977ba8bf0",
            "dcf26a84-3ae0-4de6-8ad7-22dd8fe257e2",
            "a41a73db-f8d0-484e-8f4a-495a974fd33b",
            "e1d8d5a8-c20e-4740-b87e-392f34be6f83",
            "130b7eeb-c3ee-4340-99be-1a69dbb5ec38",
            "4df7117b-0356-41d6-b87a-f377da1f8469",
            "64767bd5-2064-4f39-8136-5100d51ee843",
            "011a31c5-bf33-4941-8d22-5410c9a1f051",
            "48836e60-502b-4dd8-b38a-b4a21623c463",
            "80fd80ac-d884-44d3-b0f4-eeb3a75d4332"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8385,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4b954fb2-1476-41da-8d84-d480e1a4220a",
          "title": "TS Categories",
          "fullFile": "F:\\mqa_dot\\tests\\scenarios\\categories.spec.js",
          "file": "\\tests\\scenarios\\categories.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"TS Categories\"",
              "fullTitle": "TS Categories \"before all\" hook in \"TS Categories\"",
              "timedOut": false,
              "duration": 1227,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().login({\n  email: data.email,\n  password: data.password,\n});\ntoken = response.body.data.accessToken;",
              "err": {},
              "uuid": "6bc76d8f-ab26-4270-a0f2-7f257a5006b8",
              "parentUUID": "4b954fb2-1476-41da-8d84-d480e1a4220a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC successfully add category",
              "fullTitle": "TS Categories TC successfully add category",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new categories().addCategories(token, {\n  name: data.categoryName,\n  description: data.categoryDesc,\n});\ncategoryId = response.body.data.categoryId;\nexpect(response.statusCode).to.be.equal(201);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.message).to.be.equal(message.successAddCategory);\nexpect(response.body.data.name).to.be.equal(data.categoryName);",
              "err": {},
              "uuid": "f6127b54-22c8-480e-bca4-c47511a420da",
              "parentUUID": "4b954fb2-1476-41da-8d84-d480e1a4220a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC get detail category",
              "fullTitle": "TS Categories TC get detail category",
              "timedOut": false,
              "duration": 413,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new categories().getCategories(token, categoryId);\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.data.category.name).to.be.equal(data.categoryName);\nexpect(response.body.data.category.description).to.be.equal(data.categoryDesc);\nexpect(response.body).to.be.jsonSchema({\n  $schema: \"http://json-schema.org/draft-06/schema#\",\n  $ref: \"#/definitions/Welcome1\",\n  definitions: {\n    Welcome1: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        status: {\n          type: \"string\",\n        },\n        data: {\n          $ref: \"#/definitions/Data\",\n        },\n      },\n      required: [\"data\", \"status\"],\n      title: \"Welcome1\",\n    },\n    Data: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        category: {\n          $ref: \"#/definitions/Category\",\n        },\n      },\n      required: [\"category\"],\n      title: \"Data\",\n    },\n    Category: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: \"string\",\n        },\n        description: {\n          type: \"string\",\n        },\n      },\n      required: [\"description\", \"name\"],\n      title: \"Category\",\n    },\n  },\n});",
              "err": {},
              "uuid": "796d921f-6b93-42aa-a519-de77ab2bd6c1",
              "parentUUID": "4b954fb2-1476-41da-8d84-d480e1a4220a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC update category",
              "fullTitle": "TS Categories TC update category",
              "timedOut": false,
              "duration": 607,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new categories().updateCategories(token, categoryId,\n  {\n    name: data.categoryUpdate,\n    description: data.categoryDesc,\n  }\n);\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.data.name).to.be.equal(data.categoryUpdate);",
              "err": {},
              "uuid": "52709096-3cc2-46d4-8b99-93a570bb800e",
              "parentUUID": "4b954fb2-1476-41da-8d84-d480e1a4220a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC delete category",
              "fullTitle": "TS Categories TC delete category",
              "timedOut": false,
              "duration": 611,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new categories().deleteCategories(token, categoryId);\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);",
              "err": {},
              "uuid": "56eee590-08c1-4dbf-843f-e92b4219189f",
              "parentUUID": "4b954fb2-1476-41da-8d84-d480e1a4220a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f6127b54-22c8-480e-bca4-c47511a420da",
            "796d921f-6b93-42aa-a519-de77ab2bd6c1",
            "52709096-3cc2-46d4-8b99-93a570bb800e",
            "56eee590-08c1-4dbf-843f-e92b4219189f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2038,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3faa81e6-a229-4014-b63e-4dff99931a69",
          "title": "TS Customers",
          "fullFile": "F:\\mqa_dot\\tests\\scenarios\\customers.spec.js",
          "file": "\\tests\\scenarios\\customers.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"TS Customers\"",
              "fullTitle": "TS Customers \"before all\" hook in \"TS Customers\"",
              "timedOut": false,
              "duration": 1023,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().login({\n  email: data.email,\n  password: data.password,\n});\ntoken = response.body.data.accessToken;",
              "err": {},
              "uuid": "5f882cae-06e0-49ae-b8cd-d9214ae3c1af",
              "parentUUID": "3faa81e6-a229-4014-b63e-4dff99931a69",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC successfully add customer",
              "fullTitle": "TS Customers TC successfully add customer",
              "timedOut": false,
              "duration": 1535,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new customers().addCustomer(token, {\n  name: data.customerName,\n  phone: data.customerPhone,\n  address: data.customerAddress,\n  description: data.customerDesc,\n});\ncustomerId = response.body.data.customerId;\nexpect(response.statusCode).to.be.equal(201);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.message).to.be.equal(message.successAddCustomer);\nexpect(response.body.data.name).to.be.equal(data.customerName);",
              "err": {},
              "uuid": "4c2d4d1a-ea8d-4bfd-a7da-9129e2e71304",
              "parentUUID": "3faa81e6-a229-4014-b63e-4dff99931a69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC get detail customer",
              "fullTitle": "TS Customers TC get detail customer",
              "timedOut": false,
              "duration": 1021,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new customers().getCustomer(token, customerId);\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.data.customer.name).to.be.equal(data.customerName);\nexpect(response.body.data.customer.phone).to.be.equal(data.customerPhone);\nexpect(response.body.data.customer.address).to.be.equal(data.customerAddress);\nexpect(response.body.data.customer.description).to.be.equal(data.customerDesc);\nexpect(response.body).to.be.jsonSchema({\n  $schema: \"http://json-schema.org/draft-06/schema#\",\n  $ref: \"#/definitions/Welcome4\",\n  definitions: {\n    Welcome4: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        status: {\n          type: \"string\",\n        },\n        data: {\n          $ref: \"#/definitions/Data\",\n        },\n      },\n      required: [\"data\", \"status\"],\n      title: \"Welcome4\",\n    },\n    Data: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        customer: {\n          $ref: \"#/definitions/Customer\",\n        },\n      },\n      required: [\"customer\"],\n      title: \"Data\",\n    },\n    Customer: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: \"string\",\n        },\n        phone: {\n          type: \"string\",\n        },\n        address: {\n          type: \"string\",\n        },\n        description: {\n          type: \"string\",\n        },\n      },\n      required: [\"address\", \"description\", \"name\", \"phone\"],\n      title: \"Customer\",\n    },\n  },\n});",
              "err": {},
              "uuid": "ede6e4b2-c492-40f2-ae6c-ccd26b91e7d2",
              "parentUUID": "3faa81e6-a229-4014-b63e-4dff99931a69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC update customer",
              "fullTitle": "TS Customers TC update customer",
              "timedOut": false,
              "duration": 1225,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new customers().updateCustomer(token, customerId, {\n  name: data.customerNameUpdate,\n  phone: data.customerPhoneUpdate,\n  address: data.customerAddressUpdate,\n  description: data.customerDescUpdate,\n});\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.data.name).to.be.equal(data.customerNameUpdate);",
              "err": {},
              "uuid": "706fd352-a44f-447b-a964-ba3d8857911e",
              "parentUUID": "3faa81e6-a229-4014-b63e-4dff99931a69",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC delete customer",
              "fullTitle": "TS Customers TC delete customer",
              "timedOut": false,
              "duration": 507,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new customers().deleteCustomer(token, customerId);\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);",
              "err": {},
              "uuid": "a04faa2a-13ff-4f7f-9cc3-87543dc92802",
              "parentUUID": "3faa81e6-a229-4014-b63e-4dff99931a69",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c2d4d1a-ea8d-4bfd-a7da-9129e2e71304",
            "ede6e4b2-c492-40f2-ae6c-ccd26b91e7d2",
            "706fd352-a44f-447b-a964-ba3d8857911e",
            "a04faa2a-13ff-4f7f-9cc3-87543dc92802"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4288,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c3c45d9a-19a1-4c26-a44d-6edb4e54d300",
          "title": "TS Products",
          "fullFile": "F:\\mqa_dot\\tests\\scenarios\\products.spec.js",
          "file": "\\tests\\scenarios\\products.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"TS Products\"",
              "fullTitle": "TS Products \"before all\" hook in \"TS Products\"",
              "timedOut": false,
              "duration": 612,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().login({\n  email: data.email,\n  password: data.password,\n});\ntoken = response.body.data.accessToken;",
              "err": {},
              "uuid": "94ed41b9-52a9-4396-b07e-0db740d6f58c",
              "parentUUID": "c3c45d9a-19a1-4c26-a44d-6edb4e54d300",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"TS Products\"",
              "fullTitle": "TS Products \"before all\" hook in \"TS Products\"",
              "timedOut": false,
              "duration": 625,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new categories().addCategories(token, {\n  name: data.categoryName,\n  description: data.categoryDesc,\n});\ncategoryId = response.body.data.categoryId;\nexpect(response.statusCode).to.be.equal(201);",
              "err": {},
              "uuid": "8648b6b1-de01-406b-a454-e02c7b43e635",
              "parentUUID": "c3c45d9a-19a1-4c26-a44d-6edb4e54d300",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC successfully add product",
              "fullTitle": "TS Products TC successfully add product",
              "timedOut": false,
              "duration": 602,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new products().addProduct(token, {\n  category_id: categoryId,\n  code: uniqueSeed,\n  name: data.productName,\n  price: data.productPrice,\n  cost: data.productCost,\n  stock: data.productStock,\n});\nproductId = response.body.data.productId;\nexpect(response.statusCode).to.be.equal(201);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.message).to.be.equal(message.successAddProduct);\nexpect(response.body.data.name).to.be.equal(data.productName);",
              "err": {},
              "uuid": "c87d5122-97e5-4a1a-a6a8-1f85567ae4b7",
              "parentUUID": "c3c45d9a-19a1-4c26-a44d-6edb4e54d300",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC get detail product",
              "fullTitle": "TS Products TC get detail product",
              "timedOut": false,
              "duration": 628,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new products().getProduct(token, productId);\nconst price = response.body.data.product.price.toString();\nconst cost = response.body.data.product.cost.toString();\nconst stock = response.body.data.product.stock.toString();\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.data.product.name).to.be.equal(data.productName);\nexpect(price).to.be.equal(data.productPrice);\nexpect(response.body.data.product.category_id).to.be.equal(categoryId);\nexpect(cost).to.be.equal(data.productCost);\nexpect(stock).to.be.equal(data.productStock);\nexpect(response.body).to.be.jsonSchema({\n  $schema: \"http://json-schema.org/draft-06/schema#\",\n  $ref: \"#/definitions/Welcome5\",\n  definitions: {\n    Welcome5: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        status: {\n          type: \"string\",\n        },\n        data: {\n          $ref: \"#/definitions/Data\",\n        },\n      },\n      required: [\"data\", \"status\"],\n      title: \"Welcome5\",\n    },\n    Data: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        product: {\n          $ref: \"#/definitions/Product\",\n        },\n      },\n      required: [\"product\"],\n      title: \"Data\",\n    },\n    Product: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        code: {\n          type: \"string\",\n        },\n        name: {\n          type: \"string\",\n        },\n        description: {\n          type: \"null\",\n        },\n        price: {\n          type: \"integer\",\n        },\n        cost: {\n          type: \"integer\",\n        },\n        cost_average: {\n          type: \"null\",\n        },\n        category_name: {\n          type: \"string\",\n        },\n        category_id: {\n          type: \"string\",\n          format: \"uuid\",\n        },\n        stock: {\n          type: \"integer\",\n        },\n      },\n      required: [\n        \"category_id\",\n        \"category_name\",\n        \"code\",\n        \"cost\",\n        \"cost_average\",\n        \"description\",\n        \"name\",\n        \"price\",\n        \"stock\",\n      ],\n      title: \"Product\",\n    },\n  },\n});",
              "err": {},
              "uuid": "9a0aee18-1735-4ae7-8785-70f45a0874f3",
              "parentUUID": "c3c45d9a-19a1-4c26-a44d-6edb4e54d300",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC update product",
              "fullTitle": "TS Products TC update product",
              "timedOut": false,
              "duration": 599,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new products().updateProduct(token, productId, {\n  category_id: data.productCategoryID,\n  code: uniqueSeed,\n  name: data.productNameUpdate,\n  price: data.productPriceUpdate,\n  cost: data.productCostUpdate,\n  stock: data.productStockUpdate,\n});\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.message).to.be.equal(message.successUpdateProduct);\nexpect(response.body.data.name).to.be.equal(data.productNameUpdate);",
              "err": {},
              "uuid": "33de5714-1c54-459e-9797-5fa4f272264f",
              "parentUUID": "c3c45d9a-19a1-4c26-a44d-6edb4e54d300",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC delete product",
              "fullTitle": "TS Products TC delete product",
              "timedOut": false,
              "duration": 713,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new products().deleteProduct(token, productId);\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);",
              "err": {},
              "uuid": "755d1a83-f924-4c97-9be0-9c3d9e0cef69",
              "parentUUID": "c3c45d9a-19a1-4c26-a44d-6edb4e54d300",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c87d5122-97e5-4a1a-a6a8-1f85567ae4b7",
            "9a0aee18-1735-4ae7-8785-70f45a0874f3",
            "33de5714-1c54-459e-9797-5fa4f272264f",
            "755d1a83-f924-4c97-9be0-9c3d9e0cef69"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2542,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6991b4ef-9331-4fa4-9c74-2fc6b4753582",
          "title": "TS Products",
          "fullFile": "F:\\mqa_dot\\tests\\scenarios\\transactions.spec.js",
          "file": "\\tests\\scenarios\\transactions.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"TS Products\"",
              "fullTitle": "TS Products \"before all\" hook in \"TS Products\"",
              "timedOut": false,
              "duration": 836,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().login({\n  email: data.email,\n  password: data.password,\n});\ntoken = response.body.data.accessToken;",
              "err": {},
              "uuid": "c22cfb74-e3ba-42c7-9f58-3b85770dd876",
              "parentUUID": "6991b4ef-9331-4fa4-9c74-2fc6b4753582",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"TS Products\"",
              "fullTitle": "TS Products \"before all\" hook in \"TS Products\"",
              "timedOut": false,
              "duration": 393,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new categories().addCategories(token, {\n  name: data.categoryName,\n  description: data.categoryDesc,\n});\ncategoryId = response.body.data.categoryId;\nexpect(response.statusCode).to.be.equal(201);",
              "err": {},
              "uuid": "e1f50464-0680-47eb-a6f2-b9327457d445",
              "parentUUID": "6991b4ef-9331-4fa4-9c74-2fc6b4753582",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"TS Products\"",
              "fullTitle": "TS Products \"before all\" hook in \"TS Products\"",
              "timedOut": false,
              "duration": 616,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new customers().addCustomer(token, {\n  name: data.customerName,\n  phone: data.customerPhone,\n  address: data.customerAddress,\n  description: data.customerDesc,\n});\ncustomerId = response.body.data.customerId;\nexpect(response.statusCode).to.be.equal(201);",
              "err": {},
              "uuid": "897fed13-2826-40e1-8b95-d241ef96ffa7",
              "parentUUID": "6991b4ef-9331-4fa4-9c74-2fc6b4753582",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before all\" hook in \"TS Products\"",
              "fullTitle": "TS Products \"before all\" hook in \"TS Products\"",
              "timedOut": false,
              "duration": 512,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new products().addProduct(token, {\n  category_id: categoryId,\n  code: uniqueSeed,\n  name: data.productName,\n  price: data.productPrice,\n  cost: data.productCost,\n  stock: data.productStock,\n});\nproductId = response.body.data.productId;\nexpect(response.statusCode).to.be.equal(201);",
              "err": {},
              "uuid": "adbb4d6a-78c3-4d93-886a-c9de7d7ef0ce",
              "parentUUID": "6991b4ef-9331-4fa4-9c74-2fc6b4753582",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC successfully add sale",
              "fullTitle": "TS Products TC successfully add sale",
              "timedOut": false,
              "duration": 518,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new transactions().addSale(token, {\n  officeId: data.officeId,\n  customerId: customerId,\n  date: formattedDate,\n  invoice: invoice,\n  amount: 2000,\n  discount: 0,\n  description: data.transactionDesc,\n  items: [\n    {\n      productId: productId,\n      quantity: 1,\n      price: 2000,\n    },\n  ],\n});\nsaleId = response.body.data.saleId;\nexpect(response.statusCode).to.be.equal(201);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.message).to.be.equal(message.successAddTransaksi);",
              "err": {},
              "uuid": "cc6ceea4-d015-4a84-856d-4d23516a9a49",
              "parentUUID": "6991b4ef-9331-4fa4-9c74-2fc6b4753582",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC successfully get sale",
              "fullTitle": "TS Products TC successfully get sale",
              "timedOut": false,
              "duration": 1320,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new transactions().getSale(token, saleId);\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.data.sale.invoice).to.be.equal(invoice);\nexpect(response.body.data.sale.description).to.be.equal(data.transactionDesc);\nexpect(response.body.data.sale.casier).to.be.equal(data.casier);\nexpect(response.body.data.sale.customer_id).to.be.equal(customerId);\nexpect(response.body.data.sale.customer_name).to.be.equal(data.customerName);\nexpect(response.body.data.sale.items[0].id).to.be.equal(productId);\nexpect(response.body.data.sale.items[0].name).to.be.equal(data.productName);",
              "err": {},
              "uuid": "02c8fcb1-d90e-49e5-a6c5-ac02ea55a7f1",
              "parentUUID": "6991b4ef-9331-4fa4-9c74-2fc6b4753582",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC successfully add purchase",
              "fullTitle": "TS Products TC successfully add purchase",
              "timedOut": false,
              "duration": 413,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new transactions().addPurchase(token, {\n  officeId: data.officeId,\n  date: formattedDate,\n  invoice: invoice,\n  amount: 14000,\n  discount: 0,\n  description: data.transactionDesc,\n  items: [\n    {\n      productId: productId,\n      quantity: 4,\n      cost: 3500,\n    },\n  ],\n});\npurchaseId = response.body.data.purchaseId;\nexpect(response.statusCode).to.be.equal(201);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.message).to.be.equal(message.successAddTransaksi);",
              "err": {},
              "uuid": "a4528401-ca23-475a-b2e2-90349c63b3fd",
              "parentUUID": "6991b4ef-9331-4fa4-9c74-2fc6b4753582",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC successfully get purchase",
              "fullTitle": "TS Products TC successfully get purchase",
              "timedOut": false,
              "duration": 413,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new transactions().getPurchase(token, purchaseId);\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.data.purchase.invoice).to.be.equal(invoice);",
              "err": {},
              "uuid": "749e5926-6c16-4301-a24c-8549c71c4a10",
              "parentUUID": "6991b4ef-9331-4fa4-9c74-2fc6b4753582",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cc6ceea4-d015-4a84-856d-4d23516a9a49",
            "02c8fcb1-d90e-49e5-a6c5-ac02ea55a7f1",
            "a4528401-ca23-475a-b2e2-90349c63b3fd",
            "749e5926-6c16-4301-a24c-8549c71c4a10"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2664,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5ff91ac6-31f8-45de-98ed-33efa8dd9ae1",
          "title": "TS Unit",
          "fullFile": "F:\\mqa_dot\\tests\\scenarios\\unit.spec.js",
          "file": "\\tests\\scenarios\\unit.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"TS Unit\"",
              "fullTitle": "TS Unit \"before all\" hook in \"TS Unit\"",
              "timedOut": false,
              "duration": 1840,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().login({\n  email: data.email,\n  password: data.password,\n});\ntoken = response.body.data.accessToken;",
              "err": {},
              "uuid": "ec8bdad2-bd5b-4dfe-8566-727d174971e6",
              "parentUUID": "5ff91ac6-31f8-45de-98ed-33efa8dd9ae1",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC successfully add unit",
              "fullTitle": "TS Unit TC successfully add unit",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new unit().addUnit(token, {\n  name: data.unitName,\n  description: data.unitDesc,\n});\nunitId = response.body.data.unitId;\nexpect(response.statusCode).to.be.equal(201);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.message).to.be.equal(message.successAddUnit);\nexpect(response.body.data.name).to.be.equal(data.unitName);",
              "err": {},
              "uuid": "f9032507-2ffa-436d-ba0d-1ef4e5fd3810",
              "parentUUID": "5ff91ac6-31f8-45de-98ed-33efa8dd9ae1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC get detail unit",
              "fullTitle": "TS Unit TC get detail unit",
              "timedOut": false,
              "duration": 407,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new unit().getUnit(token, unitId);\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.data.unit.name).to.be.equal(data.unitName);\nexpect(response.body.data.unit.description).to.be.equal(data.unitDesc);\nexpect(response.body).to.be.jsonSchema({\n  $schema: \"http://json-schema.org/draft-06/schema#\",\n  $ref: \"#/definitions/Welcome4\",\n  definitions: {\n    Welcome4: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        status: {\n          type: \"string\",\n        },\n        data: {\n          $ref: \"#/definitions/Data\",\n        },\n      },\n      required: [\"data\", \"status\"],\n      title: \"Welcome4\",\n    },\n    Data: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        unit: {\n          $ref: \"#/definitions/Unit\",\n        },\n      },\n      required: [\"unit\"],\n      title: \"Data\",\n    },\n    Unit: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        name: {\n          type: \"string\",\n        },\n        description: {\n          type: \"string\",\n        },\n      },\n      required: [\"description\", \"name\"],\n      title: \"Unit\",\n    },\n  },\n});",
              "err": {},
              "uuid": "0656aa08-d5d8-4fdd-936a-a780879e9dca",
              "parentUUID": "5ff91ac6-31f8-45de-98ed-33efa8dd9ae1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC update unit",
              "fullTitle": "TS Unit TC update unit",
              "timedOut": false,
              "duration": 404,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new unit().updateUnit(token, unitId, {\n  name: data.unitUpdate,\n  description: data.unitDescUpdate,\n});\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.data.name).to.be.equal(data.unitUpdate);",
              "err": {},
              "uuid": "8113e672-1fcb-450c-a267-6f27a5c80e79",
              "parentUUID": "5ff91ac6-31f8-45de-98ed-33efa8dd9ae1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC delete unit",
              "fullTitle": "TS Unit TC delete unit",
              "timedOut": false,
              "duration": 406,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new unit().deleteUnit(token, unitId);\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);",
              "err": {},
              "uuid": "8af6005c-afb8-4977-84c4-1416914235cb",
              "parentUUID": "5ff91ac6-31f8-45de-98ed-33efa8dd9ae1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f9032507-2ffa-436d-ba0d-1ef4e5fd3810",
            "0656aa08-d5d8-4fdd-936a-a780879e9dca",
            "8113e672-1fcb-450c-a267-6f27a5c80e79",
            "8af6005c-afb8-4977-84c4-1416914235cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1624,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2ecab022-1797-42c5-8151-4e7f3346646a",
          "title": "TS User",
          "fullFile": "F:\\mqa_dot\\tests\\scenarios\\user.spec.js",
          "file": "\\tests\\scenarios\\user.spec.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"TS User\"",
              "fullTitle": "TS User \"before all\" hook in \"TS User\"",
              "timedOut": false,
              "duration": 820,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new auth().login({\n  email: data.email,\n  password: data.password,\n});\ntoken = response.body.data.accessToken;",
              "err": {},
              "uuid": "c5178a87-26a3-41c1-bd0e-8dcb21f2ca66",
              "parentUUID": "2ecab022-1797-42c5-8151-4e7f3346646a",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "TC successfully add user",
              "fullTitle": "TS User TC successfully add user",
              "timedOut": false,
              "duration": 718,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new user().addUser(token, {\n  name: \"user\" + uniqueSeed,\n  email: uniqueSeed + \"user@gmail.com\",\n  password: \"password\",\n});\nuserId = response.body.data.userId;\nexpect(response.statusCode).to.be.equal(201);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.message).to.be.equal(message.successAddUser);",
              "err": {},
              "uuid": "3f234c8a-fa7e-4c0f-b81e-374676c75ccf",
              "parentUUID": "2ecab022-1797-42c5-8151-4e7f3346646a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC get detail user",
              "fullTitle": "TS User TC get detail user",
              "timedOut": false,
              "duration": 509,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new user().getUser(token, userId);\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body).to.be.jsonSchema({\n  $schema: \"http://json-schema.org/draft-06/schema#\",\n  $ref: \"#/definitions/Welcome5\",\n  definitions: {\n    Welcome5: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        status: {\n          type: \"string\",\n        },\n        data: {\n          $ref: \"#/definitions/Data\",\n        },\n      },\n      required: [\"data\", \"status\"],\n      title: \"Welcome5\",\n    },\n    Data: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        user: {\n          $ref: \"#/definitions/User\",\n        },\n      },\n      required: [\"user\"],\n      title: \"Data\",\n    },\n    User: {\n      type: \"object\",\n      additionalProperties: false,\n      properties: {\n        id: {\n          type: \"string\",\n          format: \"uuid\",\n        },\n        name: {\n          type: \"string\",\n        },\n        email: {\n          type: \"string\",\n        },\n        role: {\n          type: \"string\",\n        },\n      },\n      required: [\"email\", \"id\", \"name\", \"role\"],\n      title: \"User\",\n    },\n  },\n});",
              "err": {},
              "uuid": "59dfb088-9579-4315-af11-f0c3eeea60bf",
              "parentUUID": "2ecab022-1797-42c5-8151-4e7f3346646a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC update user",
              "fullTitle": "TS User TC update user",
              "timedOut": false,
              "duration": 609,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new user().updateUser(token, userId, {\n  name: data.nameUpdate,\n  email: uniqueSeed + \"userUpdate@gmail.com\",\n});\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.message).to.be.equal(message.successUpdateUser);\nexpect(response.body.data.name).to.be.equal(data.nameUpdate);",
              "err": {},
              "uuid": "4b75d24a-d17d-4991-87b9-002b15239e84",
              "parentUUID": "2ecab022-1797-42c5-8151-4e7f3346646a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "TC delete user",
              "fullTitle": "TS User TC delete user",
              "timedOut": false,
              "duration": 610,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await new user().deleteUser(token, userId);\nexpect(response.statusCode).to.be.equal(200);\nexpect(response.body.status).to.be.equal(message.success);\nexpect(response.body.message).to.be.equal(message.successDeleteUser);",
              "err": {},
              "uuid": "7b2f8200-bf60-41e9-90e8-5ba9d53eab25",
              "parentUUID": "2ecab022-1797-42c5-8151-4e7f3346646a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3f234c8a-fa7e-4c0f-b81e-374676c75ccf",
            "59dfb088-9579-4315-af11-f0c3eeea60bf",
            "4b75d24a-d17d-4991-87b9-002b15239e84",
            "7b2f8200-bf60-41e9-90e8-5ba9d53eab25"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2446,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "autoOpen": "true"
      },
      "version": "6.2.0"
    }
  }
}